import { LLMProvider } from './adapter';

export class MockProvider implements LLMProvider {
  async propose(candidateId: string, parsedText?: string): Promise<any> {
    // Mock screening proposal
    return {
      action: "include",
      justification: "Mock justification for screening proposal",
      supports: [
        {
          quote: "This is a mock quote from the parsed text.",
          locator: { page: 1, sentence: 1 }
        }
      ],
      quickRob: {
        selection: "Low risk",
        performance: "Low risk", 
        reporting: "Low risk"
      },
      confidence: 0.8
    };
  }

  async generateExplorer(profile: any): Promise<any> {
    // Mock explorer output
    return {
      outline: ["Introduction", "Methods", "Results", "Discussion"],
      narrative: [
        {
          section: "Introduction",
          text: "This is a mock narrative section generated by the AI Explorer.",
          refs: [{ doi: "10.1000/mock" }]
        }
      ],
      refs: [
        {
          title: "Mock Reference Title",
          doi: "10.1000/mock",
          journal: "Mock Journal",
          year: 2023
        }
      ]
    };
  }

  async tighten(text: string): Promise<string> {
    // Mock text tightening
    return `[Tightened] ${text}`;
  }
}
